AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64'
  DocumentDBEngineVersion:
    Type: String
    Default: 5.0.0
    Description: DocumentDB engine version
  JavaVersion:
    Type: String
    Description: Choose the version of Java. Lambda currently supports Java 11, 17 and 21
    AllowedValues:
      - java11
      - java17
      - java21
    Default: java21
  DocumentDBDatabaseName:
    Type: String
    Default: DocumentDBJavaLambdaDB
    Description: DocumentDB database name for Lambda function
  DocumentDBCollectionName:
    Type: String
    Default: DocumentDBJavaLambdaCollection
    Description: DocumentDB collection name for Lambda function
  DocumentDBClusterAdminUser:
    Type: String
    Description: Password for the DocumentDB Cluster
    Default: docdbadmin
  DocumentDBClusterPassword:
    Type: String
    Description: Password for the DocumentDB Cluster
    Default: docdbPassword123
    NoEcho: true
  DocumentDBTrustStorePassword:
    Type: String
    Description: Password for the DocumentDB Client TLS Truststore Password
    Default: docdbTrustPass123
    NoEcho: true
  ServerlessLandGithubLocation:
    Type: String
    Default: https://github.com/aws-samples/serverless-patterns.git
    Description: Github location of the code. Make sure to leave the .git at the end even if you are using a fork

Mappings:
  SubnetConfig:
      VPC:
        CIDR: '10.0.0.0/16'
      PublicOne:
        CIDR: '10.0.0.0/24'
      PublicTwo:
        CIDR: '10.0.1.0/24'
      PublicThree:
        CIDR: '10.0.2.0/24'
      PrivateSubnetDocDBOne:
        CIDR: '10.0.3.0/24'
      PrivateSubnetDocDBTwo:
        CIDR: '10.0.4.0/24'
      PrivateSubnetDocDBThree:
        CIDR: '10.0.5.0/24'

Resources:
  # Secrets Manager Secret for DocumentDB credentials
  DocumentDBSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: 'AmazonDocumentDBCredentials'
      Description: DocumentDB cluster master user credentials
      SecretString: !Sub |
        {
          "username": "${DocumentDBClusterAdminUser}",
          "password": "${DocumentDBClusterPassword}"
        }

  DocumentDBTrustStoreSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: 'AmazonDocumentDBTruststore'
      Description: DocumentDB secret for truststore for SSL client to connect
      SecretString: !Sub |
        {
          "truststore": "/home/ec2-user/mongotruststore/rds-truststore.jks",
          "truststorepassword": "${DocumentDBTrustStorePassword}"
        }

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !FindInMap ['SubnetConfig', 'VPC', 'CIDR']
      Tags:
        - Key: 'Name'
          Value: 'DocumentDBVPC'

  PublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 0
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicOne', 'CIDR']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: 'Name'
          Value: 'PublicSubnetOne'
  PublicSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 1
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicTwo', 'CIDR']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: 'Name'
          Value: 'PublicSubnetTwo'
  PublicSubnetThree:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 2
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicThree', 'CIDR']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: 'Name'
          Value: 'PublicSubnetThree'
  PrivateSubnetDocDBOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 0
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PrivateSubnetDocDBOne', 'CIDR']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: 'Name'
          Value: 'PrivateSubnetDocDBOne'
  PrivateSubnetDocDBTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 1
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PrivateSubnetDocDBTwo', 'CIDR']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: 'Name'
          Value: 'PrivateSubnetDocDBTwo'
  PrivateSubnetDocDBThree:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 2
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PrivateSubnetDocDBThree', 'CIDR']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: 'Name'
          Value: 'PrivateSubnetDocDBThree'

  InternetGateway:
    Type: AWS::EC2::InternetGateway
  GatewayAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'VPC'
      InternetGatewayId: !Ref 'InternetGateway'

  NATEIP1:
    Type: AWS::EC2::EIP
    DependsOn: GatewayAttachement
    Properties: 
      Domain: vpc

  NATGateway1:
    Type: AWS::EC2::NatGateway
    Properties: 
      AllocationId: !GetAtt NATEIP1.AllocationId
      SubnetId: !Ref 'PublicSubnetOne'
      Tags: 
        - Key: 'Name'
          Value: 'DocumentDBNATGateway1'

  NATEIP2:
    Type: AWS::EC2::EIP
    DependsOn: GatewayAttachement
    Properties: 
      Domain: vpc

  NATGateway2:
    Type: AWS::EC2::NatGateway
    Properties: 
      AllocationId: !GetAtt NATEIP2.AllocationId
      SubnetId: !Ref 'PublicSubnetTwo'
      Tags: 
        - Key: 'Name'
          Value: 'DocumentDBNATGateway2'

  NATEIP3:
    Type: AWS::EC2::EIP
    DependsOn: GatewayAttachement
    Properties: 
      Domain: vpc

  NATGateway3:
    Type: AWS::EC2::NatGateway
    Properties: 
      AllocationId: !GetAtt NATEIP3.AllocationId
      SubnetId: !Ref 'PublicSubnetThree'
      Tags: 
        - Key: 'Name'
          Value: 'DocumentDBNATGateway3'

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachement
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
      
  PublicSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetOne
      RouteTableId: !Ref PublicRouteTable
      
  PublicSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetTwo
      RouteTableId: !Ref PublicRouteTable
      
  PublicSubnetThreeRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetThree
      RouteTableId: !Ref PublicRouteTable
      
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'

  PrivateRoute1:
    Type: AWS::EC2::Route
    DependsOn: NATGateway1
    Properties:
      RouteTableId: !Ref 'PrivateRouteTable1'
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref 'NATGateway1'
      
  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'

  PrivateRoute2:
    Type: AWS::EC2::Route
    DependsOn: NATGateway2
    Properties:
      RouteTableId: !Ref 'PrivateRouteTable2'
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref 'NATGateway2'

  PrivateRouteTable3:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'

  PrivateRoute3:
    Type: AWS::EC2::Route
    DependsOn: NATGateway3
    Properties:
      RouteTableId: !Ref 'PrivateRouteTable3'
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref 'NATGateway3'

  PrivateSubnetDocDBOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnetDocDBOne
      
  PrivateSubnetDocDBTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnetDocDBTwo
      
  PrivateSubnetDocDBThreeRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable3
      SubnetId: !Ref PrivateSubnetDocDBThree
  
  DocumentDBClientInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22 from BastionHostSecurityGroup
      GroupName: !Sub "${AWS::StackName} Security group attached to the DocumentDB client"
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 10.0.0.0/16

  DocumentDBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: [VPC,DocumentDBClientInstanceSecurityGroup]
    Properties:
      GroupDescription: DocumentDB Security Group
      GroupName: !Sub "${AWS::StackName} Security group for the DocumentDB cluster"
      VpcId: !Ref 'VPC'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 27017
          ToPort: 27017
          SourceSecurityGroupId: !GetAtt DocumentDBClientInstanceSecurityGroup.GroupId
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 10.0.0.0/16

  DocumentDBClientSelfIngressAllowRule:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: DocumentDBClientInstanceSecurityGroup
    Properties:
      GroupId: !GetAtt DocumentDBClientInstanceSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourceSecurityGroupId: !GetAtt DocumentDBClientInstanceSecurityGroup.GroupId

  DocumentDBClientEC2Instance:
    DependsOn: DocumentDBCluster
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: m5.large
      IamInstanceProfile: !Ref EC2InstanceProfile
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: {Ref: 'AWS::Region'}
      SubnetId: !Ref PublicSubnetOne
      SecurityGroupIds: [!GetAtt DocumentDBClientInstanceSecurityGroup.GroupId]
      ImageId: !Ref LatestAmiId
      Tags:
        - Key: 'Name'
          Value: 'DocumentDBClientInstance'
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 50
            VolumeType: gp2
            DeleteOnTermination: true    
      UserData:
        Fn::Base64:
          !Sub
          - |
            #!/bin/bash
            yum update -y
            
            # install Java
            max_attempts=5
            attempt_num=1
            success=false
            while [ $success = false ] && [ $attempt_num -le $max_attempts ]; do
                echo "Trying yum install"
                yum update -y
                # yum install java-openjdk11-devel -y
            
                # install Java
                JAVA_VERSION=${java_version}
                echo "JAVA_VERSION=$JAVA_VERSION" >> /home/ec2-user/.bash_profile
                if [ "$JAVA_VERSION" == "java11" ]; then
                    sudo yum install java-11-amazon-corretto-devel -y
                elif [ "$JAVA_VERSION" == "java17" ]; then
                    sudo yum install java-17-amazon-corretto-devel -y
                elif [ "$JAVA_VERSION" == "java21" ]; then
                    sudo yum install java-21-amazon-corretto-devel -y
                else
                    sudo yum install java-21-amazon-corretto-devel -y
                fi
                # Check the exit code of the command
                if [ $? -eq 0 ]; then
                    echo "Yum install of Java succeeded"
                    success=true
                else
                    echo "Attempt $attempt_num failed. Sleeping for 3 seconds and trying again..."
                    sleep 3
                    ((attempt_num++))
                fi
            done
            
            max_attempts=5
            attempt_num=1
            success=false
            while [ $success = false ] && [ $attempt_num -le $max_attempts ]; do
                echo "Trying yum install"
                yum install nmap-ncat -y
                # Check the exit code of the command
                if [ $? -eq 0 ]; then
                    echo "Yum install of nmap succeeded"
                    success=true
                else
                    echo "Attempt $attempt_num failed. Sleeping for 3 seconds and trying again..."
                    sleep 3
                    ((attempt_num++))
                fi
            done
            
            max_attempts=5
            attempt_num=1
            success=false
            while [ $success = false ] && [ $attempt_num -le $max_attempts ]; do
                echo "Trying yum install"
                yum install git -y
                # Check the exit code of the command
                if [ $? -eq 0 ]; then
                    echo "Yum install of git succeeded"
                    success=true
                else
                    echo "Attempt $attempt_num failed. Sleeping for 3 seconds and trying again..."
                    sleep 3
                    ((attempt_num++))
                fi
            done
            
            
            max_attempts=5
            attempt_num=1
            success=false
            while [ $success = false ] && [ $attempt_num -le $max_attempts ]; do
                echo "Trying yum install"
                yum erase awscli -y
                # Check the exit code of the command
                if [ $? -eq 0 ]; then
                    echo "Yum erase of awscli succeeded"
                    success=true
                else
                    echo "Attempt $attempt_num failed. Sleeping for 3 seconds and trying again..."
                    sleep 3
                    ((attempt_num++))
                fi
            done
            
            max_attempts=5
            attempt_num=1
            success=false
            while [ $success = false ] && [ $attempt_num -le $max_attempts ]; do
                echo "Trying yum install"
                yum install jq -y
                # Check the exit code of the command
                if [ $? -eq 0 ]; then
                    echo "Yum install of jq succeeded"
                    success=true
                else
                    echo "Attempt $attempt_num failed. Sleeping for 3 seconds and trying again..."
                    sleep 3
                    ((attempt_num++))
                fi
            done
            
            max_attempts=5
            attempt_num=1
            success=false
            while [ $success = false ] && [ $attempt_num -le $max_attempts ]; do
                echo "Trying yum install"
                sudo yum install -y docker
                # Check the exit code of the command
                if [ $? -eq 0 ]; then
                    echo "Yum install of docker succeeded"
                    success=true
                else
                    echo "Attempt $attempt_num failed. Sleeping for 3 seconds and trying again..."
                    sleep 3
                    ((attempt_num++))
                fi
            done
            
            service docker start
            usermod -a -G docker ec2-user
            
            max_attempts=5
            attempt_num=1
            success=false
            while [ $success = false ] && [ $attempt_num -le $max_attempts ]; do
                echo "Trying yum install"
                sudo yum install -y maven
                # Check the exit code of the command
                if [ $? -eq 0 ]; then
                    echo "Yum install of maven succeeded"
                    success=true
                else
                    echo "Attempt $attempt_num failed. Sleeping for 3 seconds and trying again..."
                    sleep 3
                    ((attempt_num++))
                fi
            done

            cd /home/ec2-user
            su -c "ln -s /usr/bin/python3.8 /usr/bin/python3" -s /bin/sh ec2-user
            su -c "pip3 install boto3 --user" -s /bin/sh ec2-user
            su -c "pip3 install kafka-python --user" -s /bin/sh ec2-user

            # install AWS CLI 2 - access with aws2
            cd /home/ec2-user
            mkdir -p awscli
            cd awscli
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

            
            # Install MongoDB shell
            cd /home/ec2-user
            wget https://fastdl.mongodb.org/tools/db/mongodb-database-tools-amazon2-x86_64-100.9.4.tgz
            tar -zxvf mongodb-database-tools-amazon2-x86_64-100.9.4.tgz
            sudo cp mongodb-database-tools-amazon2-x86_64-100.9.4/bin/* /usr/local/bin/
            
           
            # Install AWS SAM CLI
            cd /home/ec2-user
            mkdir -p awssam
            cd awssam
            wget https://github.com/aws/aws-sam-cli/releases/latest/download/aws-sam-cli-linux-x86_64.zip
            unzip aws-sam-cli-linux-x86_64.zip -d sam-installation
            sudo ./sam-installation/install
            
            # Set environment variables
            DOCDB_CLUSTER_ENDPOINT=${docdb_cluster_endpoint}
            DOCDB_CLUSTER_RESOURCE=${docdb_cluster_resource}
            DOCDB_CLUSTER_IDENTIFIER=${docdb_cluster_identifier}
            DOCDB_DATABASE=${docdb_database}
            DOCDB_COLLECTION=${docdb_collection}
            DOCDB_SECRET_ARN=${docdb_secret_arn}
            AWS_REGION=${aws_region}
            DOCDB_SUBNET_ONE=${docdb_subnet_one}
            DOCDB_SUBNET_TWO=${docdb_subnet_two}
            DOCDB_SUBNET_THREE=${docdb_subnet_three}
            DOCDB_SECURITY_GROUP=${docdb_security_group}
            DOCDB_CLUSTER_ADMIN_USER=${docdb_cluster_admin_user}
            DOCDB_CLUSTER_PASSWORD=${docdb_cluster_password}
            DOCDB_TRUST_STORE_PASSWORD=${docdb_trust_store_password}
            SECURITY_GROUP=${security_group_id}

            
            echo "export DOCDB_CLUSTER_ENDPOINT=$DOCDB_CLUSTER_ENDPOINT" >> /home/ec2-user/.bash_profile
            echo "export DOCDB_CLUSTER_RESOURCE=$DOCDB_CLUSTER_RESOURCE" >> /home/ec2-user/.bash_profile
            echo "export DOCDB_CLUSTER_IDENTIFIER=$DOCDB_CLUSTER_IDENTIFIER" >> /home/ec2-user/.bash_profile
            echo "export DOCDB_DATABASE=$DOCDB_DATABASE" >> /home/ec2-user/.bash_profile
            echo "export DOCDB_COLLECTION=$DOCDB_COLLECTION" >> /home/ec2-user/.bash_profile
            echo "export DOCDB_SECRET_ARN=$DOCDB_SECRET_ARN" >> /home/ec2-user/.bash_profile
            echo "export AWS_REGION=$AWS_REGION" >> /home/ec2-user/.bash_profile
            echo "export DOCDB_SUBNET_ONE=$DOCDB_SUBNET_ONE" >> /home/ec2-user/.bash_profile
            echo "export DOCDB_SUBNET_TWO=$DOCDB_SUBNET_TWO" >> /home/ec2-user/.bash_profile
            echo "export DOCDB_SUBNET_THREE=$DOCDB_SUBNET_THREE" >> /home/ec2-user/.bash_profile
            echo "export DOCDB_SECURITY_GROUP=$DOCDB_SECURITY_GROUP" >> /home/ec2-user/.bash_profile
            echo "export DOCDB_CLUSTER_ADMIN_USER=$DOCDB_CLUSTER_ADMIN_USER" >> /home/ec2-user/.bash_profile
            echo "export DOCDB_CLUSTER_PASSWORD=$DOCDB_CLUSTER_PASSWORD" >> /home/ec2-user/.bash_profile
            echo "export DOCDB_TRUST_STORE_PASSWORD=$DOCDB_TRUST_STORE_PASSWORD" >> /home/ec2-user/.bash_profile
            echo "export SECURITY_GROUP=$SECURITY_GROUP" >> /home/ec2-user/.bash_profile
                       
            
            # Clone serverless patterns
            cd /home/ec2-user
            SERVERLESS_LAND_GITHUB_LOCATION=${serverless_land_github_location}
            git clone -n --depth=1 --filter=tree:0 $SERVERLESS_LAND_GITHUB_LOCATION
            cd ./serverless-patterns
            git sparse-checkout set --no-cone /documentdb-lambda-java-sam
            git checkout
            cd documentdb-lambda-java-sam
            sudo chown -R ec2-user .
            
            #Install MongoShell
            sudo cp ./mongodb-org-8.0.repo /etc/yum.repos.d
            cd /home/ec2-user
            mkdir mongoshell
            cd mongoshell
            sudo yum install -y mongodb-mongosh
            
            #Create Java Keystore to connect to DocumentDB
            cd /home/ec2-user
            mkdir mongotruststore
            cd /home/ec2-user/mongotruststore
            cp /home/ec2-user/serverless-patterns/documentdb-lambda-java-sam/java_keystore_script.sh .
            sudo chown -R ec2-user .
            source /home/ec2-user/.bash_profile
            sed -i "s/TRUSTSTORE_PASSWORD/$DOCDB_TRUST_STORE_PASSWORD/g" java_keystore_script.sh
            chmod +x java_keystore_script.sh
            sh ./java_keystore_script.sh
            
            #Create DocumentDB database and collection
            cd /home/ec2-user/mongoshell
            wget https://truststore.pki.rds.amazonaws.com/global/global-bundle.pem
            cp /home/ec2-user/serverless-patterns/documentdb-lambda-java-sam/docdb_db_collection.sh .
            cp /home/ec2-user/serverless-patterns/documentdb-lambda-java-sam/mongodbcolcreate.js .
            cp /home/ec2-user/serverless-patterns/documentdb-lambda-java-sam/connect_to_mongo_shell.sh .
            sudo chown -R ec2-user .
            source /home/ec2-user/.bash_profile
            sed -i "s/DOCDB_CLUSTER_ENDPOINT/$DOCDB_CLUSTER_ENDPOINT/g" docdb_db_collection.sh
            sed -i "s/DOCDB_CLUSTER_ADMIN_USER/$DOCDB_CLUSTER_ADMIN_USER/g" docdb_db_collection.sh
            sed -i "s/DOCDB_CLUSTER_PASSWORD/$DOCDB_CLUSTER_PASSWORD/g" docdb_db_collection.sh
            sed -i "s/DOCDB_DATABASE/$DOCDB_DATABASE/g" docdb_db_collection.sh
            sed -i "s/DOCDB_COLLECTION/$DOCDB_COLLECTION/g" docdb_db_collection.sh
            sed -i "s/DOCDB_DATABASE/$DOCDB_DATABASE/g" mongodbcolcreate.js
            sed -i "s/DOCDB_COLLECTION/$DOCDB_COLLECTION/g" mongodbcolcreate.js
            sed -i "s/DOCDB_CLUSTER_ENDPOINT/$DOCDB_CLUSTER_ENDPOINT/g" connect_to_mongo_shell.sh
            sed -i "s/DOCDB_CLUSTER_ADMIN_USER/$DOCDB_CLUSTER_ADMIN_USER/g" connect_to_mongo_shell.sh
            sed -i "s/DOCDB_CLUSTER_PASSWORD/$DOCDB_CLUSTER_PASSWORD/g" connect_to_mongo_shell.sh
            chmod +x docdb_db_collection.sh
            chmod +x connect_to_mongo_shell.sh
            sh ./docdb_db_collection.sh
            
            #Substitute SAM template variables
            cd /home/ec2-user/serverless-patterns/documentdb-lambda-java-sam
            cd documentdb_streams_consumer_dynamo_sam
            cp template_original.yaml template.yaml
            sudo chown -R ec2-user .
            source /home/ec2-user/.bash_profile
            sed -i "s/DOCDB_CLUSTER_IDENTIFIER/$DOCDB_CLUSTER_IDENTIFIER/g" template.yaml
            sed -i "s/DOCDB_DATABASE/$DOCDB_DATABASE/g" template.yaml
            sed -i "s/DOCDB_COLLECTION/$DOCDB_COLLECTION/g" template.yaml
            sed -i "s/JAVA_VERSION/$JAVA_VERSION/g" template.yaml
            sed -i "s/DOCDB_SECRET_ARN/$DOCDB_SECRET_ARN/g" template.yaml
            sed -i "s/DOCDB_SUBNET_ONE/$DOCDB_SUBNET_ONE/g" template.yaml
            sed -i "s/DOCDB_SUBNET_TWO/$DOCDB_SUBNET_TWO/g" template.yaml
            sed -i "s/DOCDB_SUBNET_THREE/$DOCDB_SUBNET_THREE/g" template.yaml
            sed -i "s/DOCDB_SECURITY_GROUP/$SECURITY_GROUP/g" template.yaml
            
            #Adding DocumentDB variables to DocumentDB secret as CloudFormation cannot create a secret of type DocumentDB like you manually can
            aws secretsmanager put-secret-value --secret-id AmazonDocumentDBCredentials --secret-string "{\"host\":\"$DOCDB_CLUSTER_ENDPOINT\",\"port\":\"27017\",\"username\":\"$DOCDB_CLUSTER_ADMIN_USER\",\"password\":\"$DOCDB_CLUSTER_PASSWORD\",\"engine\":\"mongo\",\"ssl\":\"true\",\"dbClusterIdentifier\":\"$DOCDB_CLUSTER_IDENTIFIER\"}"
                        
            #Compiling Sender Program and Updating Command File with DocumentDB Database and Collection names
            cd /home/ec2-user/serverless-patterns/documentdb-lambda-java-sam/documentdb_streams_message_sender_json
            sudo chown -R ec2-user .
            sed -i "s/DOCDB_DATABASE/$DOCDB_DATABASE/g" commands.sh
            sed -i "s/DOCDB_COLLECTION/$DOCDB_COLLECTION/g" commands.sh
            mvn clean install
            
            # Get IP CIDR range for EC2 Instance Connect
            cd /home/ec2-user
            mkdir -p ip_prefix
            cd ip_prefix
            git clone https://github.com/joetek/aws-ip-ranges-json.git
            cd aws-ip-ranges-json
            AWS_REGION=${aws_region}
            EC2_CONNECT_IP=$(cat ip-ranges-ec2-instance-connect.json | jq -r --arg AWS_REGION "$AWS_REGION" '.prefixes[] | select(.region==$AWS_REGION).ip_prefix')
            echo "export EC2_CONNECT_IP=$EC2_CONNECT_IP" >> /home/ec2-user/.bash_profile
            SECURITY_GROUP=${security_group_id}
            echo "export SECURITY_GROUP=$SECURITY_GROUP" >> /home/ec2-user/.bash_profile
            aws ec2 authorize-security-group-ingress --region $AWS_REGION --group-id $SECURITY_GROUP --protocol tcp --port 22 --cidr $EC2_CONNECT_IP
            
          - docdb_cluster_endpoint: !GetAtt DocumentDBCluster.Endpoint
            docdb_cluster_resource: !GetAtt DocumentDBCluster.ClusterResourceId
            docdb_cluster_identifier: !Ref DocumentDBCluster
            docdb_database: !Ref DocumentDBDatabaseName
            docdb_collection: !Ref DocumentDBCollectionName
            docdb_secret_arn: !Ref DocumentDBSecret
            serverless_land_github_location: !Ref ServerlessLandGithubLocation
            aws_region: !Ref 'AWS::Region'
            java_version: !Ref JavaVersion
            security_group_id : !GetAtt DocumentDBClientInstanceSecurityGroup.GroupId
            docdb_subnet_one: !Ref PrivateSubnetDocDBOne
            docdb_subnet_two: !Ref PrivateSubnetDocDBTwo
            docdb_subnet_three: !Ref PrivateSubnetDocDBThree
            docdb_security_group: !GetAtt DocumentDBSecurityGroup.GroupId
            docdb_cluster_admin_user: !Ref DocumentDBClusterAdminUser
            docdb_cluster_password: !Ref DocumentDBClusterPassword
            docdb_trust_store_password: !Ref DocumentDBTrustStorePassword
            

  EC2InstanceEndpoint:
    Type: AWS::EC2::InstanceConnectEndpoint
    Properties:
      PreserveClientIp: true
      SecurityGroupIds: 
        - !GetAtt DocumentDBClientInstanceSecurityGroup.GroupId
      SubnetId: !Ref PublicSubnetOne

  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonDocDBFullAccess
        - arn:aws:iam::aws:policy/AWSCloudFormationFullAccess
        - arn:aws:iam::aws:policy/CloudWatchFullAccess
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/IAMFullAccess
        - arn:aws:iam::aws:policy/AWSLambda_FullAccess
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess_v2
      Policies:
        - PolicyName: DocumentDBAccess
          PolicyDocument: !Sub '{
              "Version": "2012-10-17",
              "Statement": [
                  {
                      "Sid": "DocumentDBFullAccess",
                      "Effect": "Allow",
                      "Action": [
                          "docdb:*",
                          "docdb-elastic:*"
                      ],
                      "Resource": "*"
                  }
              ]
          }'
        - PolicyName: SecretsManagerAccess
          PolicyDocument: !Sub '{
              "Version": "2012-10-17",
              "Statement": [
                  {
                      "Effect": "Allow",
                      "Action": [
                          "secretsmanager:GetSecretValue",
                          "secretsmanager:PutSecretValue",
                          "secretsmanager:DescribeSecret"
                      ],
                      "Resource": "${DocumentDBSecret}"
                  },
                  {
                      "Effect": "Allow",
                      "Action": [
                          "secretsmanager:GetSecretValue",
                          "secretsmanager:DescribeSecret"
                      ],
                      "Resource": "${DocumentDBTrustStoreSecret}"
                  }
              ]
          }'
        - PolicyName: CloudformationDeploy
          PolicyDocument: !Sub '{
              "Version": "2012-10-17",
              "Statement": [
                  {
            "Effect": "Allow",
            "Action": [
                "iam:*"
            ],
            "Resource": "*"
        }
              ]
          }' 
        - PolicyName: SecurityGroupsPolicy
          PolicyDocument: !Sub '{
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Effect": "Allow",
                    "Action": [
                        "ec2:DescribeSecurityGroups",
                        "ec2:DescribeSecurityGroupRules",
                        "ec2:DescribeTags"
                    ],
                    "Resource": "*"
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "ec2:AuthorizeSecurityGroupIngress", 
                        "ec2:RevokeSecurityGroupIngress", 
                        "ec2:AuthorizeSecurityGroupEgress", 
                        "ec2:RevokeSecurityGroupEgress", 
                        "ec2:ModifySecurityGroupRules",
                        "ec2:UpdateSecurityGroupRuleDescriptionsIngress", 
                        "ec2:UpdateSecurityGroupRuleDescriptionsEgress"
                    ],
                    "Resource": [
                        "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:security-group/*"
                    ]
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "ec2:ModifySecurityGroupRules"
                    ],
                    "Resource": [
                        "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:security-group-rule/*"
                    ]
                }
            ]
        }'         

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Join
        - '-'
        - - 'EC2DocumentDBProfile'
          - !Ref 'AWS::StackName'
      Roles:
        - !Ref EC2Role
  
  
  # DocumentDB Subnet Group
  DocumentDBSubnetGroup:
    Type: AWS::DocDB::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for DocumentDB cluster
      SubnetIds:
        - !Ref PrivateSubnetDocDBOne
        - !Ref PrivateSubnetDocDBTwo
        - !Ref PrivateSubnetDocDBThree
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-docdb-subnet-group"

  # DocumentDB Instance-Based Cluster
  DocumentDBCluster:
    Type: AWS::DocDB::DBCluster
    Properties:
      DBClusterIdentifier: !Sub "${AWS::StackName}-docdb-cluster"
      MasterUsername: !Sub "{{resolve:secretsmanager:${DocumentDBSecret}:SecretString:username}}"
      MasterUserPassword: !Sub "{{resolve:secretsmanager:${DocumentDBSecret}:SecretString:password}}"
      EngineVersion: !Ref DocumentDBEngineVersion
      DBSubnetGroupName: !Ref DocumentDBSubnetGroup
      VpcSecurityGroupIds:
        - !Ref DocumentDBSecurityGroup
      BackupRetentionPeriod: 7
      PreferredBackupWindow: "07:00-09:00"
      PreferredMaintenanceWindow: "sun:09:00-sun:11:00"
      StorageEncrypted: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-docdb-cluster"

  DocumentDBInstance1:
    Type: AWS::DocDB::DBInstance
    Properties:
      DBClusterIdentifier: !Ref DocumentDBCluster
      DBInstanceClass: db.t3.medium
      DBInstanceIdentifier: !Sub "${AWS::StackName}-docdb-instance-1"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-docdb-instance-1"

  DocumentDBInstance2:
    Type: AWS::DocDB::DBInstance
    Properties:
      DBClusterIdentifier: !Ref DocumentDBCluster
      DBInstanceClass: db.t3.medium
      DBInstanceIdentifier: !Sub "${AWS::StackName}-docdb-instance-2"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-docdb-instance-2"
          
  DocumentDBInstance3:
    Type: AWS::DocDB::DBInstance
    Properties:
      DBClusterIdentifier: !Ref DocumentDBCluster
      DBInstanceClass: db.t3.medium
      DBInstanceIdentifier: !Sub "${AWS::StackName}-docdb-instance-3"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-docdb-instance-31"

Outputs:
  VPCId: 
    Description: The ID of the VPC created
    Value: !Ref 'VPC'
    Export:
      Name: !Sub "${AWS::StackName}-VPCID"
  PublicSubnetOne: 
    Description: The name of the public subnet created
    Value: !Ref 'PublicSubnetOne'
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnetOne"
  PrivateSubnetDocDBOne: 
    Description: The ID of private subnet one created
    Value: !Ref 'PrivateSubnetDocDBOne'
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnetDocDBOne"
  PrivateSubnetDocDBTwo: 
    Description: The ID of private subnet two created
    Value: !Ref 'PrivateSubnetDocDBTwo'
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnetDocDBTwo"
  PrivateSubnetDocDBThree: 
    Description: The ID of private subnet three created
    Value: !Ref 'PrivateSubnetDocDBThree'
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnetDocDBThree"
  VPCStackName: 
    Description: The name of the VPC Stack
    Value: !Ref 'AWS::StackName'
    Export:
      Name: !Sub "${AWS::StackName}-VPCStackName"
  DocumentDBClusterEndpoint:
    Description: DocumentDB Instance-Based Cluster Endpoint
    Value: !GetAtt DocumentDBCluster.Endpoint
    Export:
      Name: !Sub "${AWS::StackName}-DocumentDBClusterEndpoint"
  DocumentDBSecretArn:
    Description: ARN of the DocumentDB credentials secret
    Value: !Ref DocumentDBSecret
    Export:
      Name: !Sub "${AWS::StackName}-DocumentDBSecretArn"
  SecurityGroupId:
    Description: ID of security group for DocumentDB clients
    Value: !GetAtt DocumentDBSecurityGroup.GroupId
    Export:
      Name: !Sub "${AWS::StackName}-SecurityGroupId"
  EC2InstanceEndpointID:
    Description: The ID of the EC2 Instance Endpoint
    Value: !Ref EC2InstanceEndpoint
  DocumentDBDatabaseName:
    Description: The Database name to use for the Java Lambda Function
    Value: !Ref DocumentDBDatabaseName
    Export:
      Name: !Sub "${AWS::StackName}-DocumentDBDatabaseName"
  DocumentDBCollectionName:
    Description: The Collection name to use for the Java Lambda Function
    Value: !Ref DocumentDBCollectionName
    Export:
      Name: !Sub "${AWS::StackName}-DocumentDBCollectionName"
